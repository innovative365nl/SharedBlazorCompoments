@using System.Reflection
@using Innovative.Blazor.Components.Components.Dialog
@using Microsoft.Extensions.Localization
@using Innovative.Blazor.Components.Components.Text
@using TextStyle = Innovative.Blazor.Components.Components.Text.TextStyle
@typeparam TModel

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.Start" Class="mb-2">
        @{
            var actionProperties = GetPropertiesWithViewAction().OrderBy(keySelector: p => p.GetCustomAttribute<UIFormViewAction>()!.Order).ToList();

            if (actionProperties.Count <= MaxNumberOfButtonsBesideEachOther)
            {
                foreach (var property in actionProperties)
                {
                    var actionAttribute = property.GetCustomAttribute<UIFormViewAction>();
                    var actionName = actionAttribute?.Name ?? property.Name;
                    var translatedActionName = _localizer.GetString(actionName);

                    <RadzenButton Text="@translatedActionName"
                                  Click="@(() => HandleActionProperty(property: property, actionAttribute: actionAttribute!))"
                                  ButtonStyle="ButtonStyle.Primary"/>
                }
            }
            else if (actionProperties.Any())
            {
                var primaryProperty = actionProperties.First();
                var primaryAttribute = primaryProperty.GetCustomAttribute<UIFormViewAction>();
                var primaryName = primaryAttribute?.Name ?? primaryProperty.Name;
                var translatedPrimaryName = _localizer.GetString(primaryName);

                <RadzenSplitButton Text="@translatedPrimaryName"
                                   Click="@(() => HandleActionProperty(property: primaryProperty, actionAttribute: primaryAttribute!))"
                                   ButtonStyle="ButtonStyle.Primary">
                    @foreach (var property in actionProperties.Skip(count: 1))
                    {
                        var actionAttribute = property.GetCustomAttribute<UIFormViewAction>();
                        var actionName = actionAttribute?.Name ?? property.Name;
                        var translatedActionName = _localizer.GetString(actionName);

                        <RadzenSplitButtonItem Text="@translatedActionName"
                                               Click="@(() => HandleActionProperty(property: property, actionAttribute: actionAttribute!))"/>
                    }
                </RadzenSplitButton>
            }
        }
    </RadzenStack>

    <section class="innovative-grid-layout">
        @foreach (var group in OrderedColumnGroups)
        {
        <div class="form-column-group @GetColumnWidthClass(group.Key)">
            @foreach (var property in group.Value)
            {
                var fieldAttribute = property.GetCustomAttribute<UIFormFieldAttribute>();
                var value = property.GetValue(obj: Model);

                <div style="display: grid; grid-template-columns: minmax(100px, auto) 1fr; gap: 0.25rem; align-items: baseline; margin-bottom: 0.5rem;">
                    <div>
                        <RadzenLabel Style="font-weight: bold">@_localizer.GetString(fieldAttribute!.Name!):</RadzenLabel>
                    </div>
                    <div>
                        @if (fieldAttribute?.DisplayComponent != null)
                        {
                            @RenderViewComponent(value: value, attribute: fieldAttribute)
                        }
                        else if (fieldAttribute!.UseWysiwyg && property.PropertyType == typeof(string) && value != null)
                        {
                            <div class="html-content">@((MarkupString)(value.ToString() ?? string.Empty))</div>
                        }
                        else
                        {
                            <InnovativeText TextStyle="TextStyle.Body1">@(value?.ToString() ?? "-")</InnovativeText>
                        }
                    </div>
                </div>
            }
            </div>
        }

        @if (UngroupedProperties.Any())
        {
            <div class="form-ungrouped">
                @foreach (var property in UngroupedProperties)
                {
                    var fieldAttribute = property.GetCustomAttribute<UIFormFieldAttribute>();
                    var value = property.GetValue(obj: Model);

                    <div style="display: grid; grid-template-columns: minmax(100px, auto) 1fr; gap: 0.25rem; align-items: baseline; margin-bottom: 0.5rem;">
                        <div>
                            <RadzenLabel Style="font-weight: bold">@_localizer.GetString(fieldAttribute!.Name!):</RadzenLabel>
                        </div>
                        <div>
                            @if (fieldAttribute?.DisplayComponent != null)
                            {
                                @RenderViewComponent(value: value, attribute: fieldAttribute)
                            }
                            else if (fieldAttribute!.UseWysiwyg && property.PropertyType == typeof(string) && value != null)
                            {
                                <div class="html-content">@((MarkupString)(value.ToString() ?? string.Empty))</div>
                            }
                            else
                            {
                                <InnovativeText TextStyle="TextStyle.Body1" class="truncated-text">@(value?.ToString() ?? "-")</InnovativeText>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </section>
</RadzenStack>
